#+TITLE: MHC cookbook
#+AUTHOR: Yoshinari Nomura
#+EMAIL:
#+DATE:
#+OPTIONS: H:3 num:2 toc:nil
#+OPTIONS: ^:nil @:t \n:nil ::t |:t f:t TeX:t
#+OPTIONS: skip:nil
#+OPTIONS: author:t
#+OPTIONS: email:nil
#+OPTIONS: creator:nil
#+OPTIONS: timestamp:nil
#+OPTIONS: timestamps:nil
#+OPTIONS: d:nil
#+OPTIONS: tags:t
#+TEXT:
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE: ja
#+STARTUP: odd
#+LATEX_CLASS: jsarticle
#+LATEX_CLASS_OPTIONS: [a4j,dvipdfmx]
# #+LATEX_HEADER: \usepackage{plain-article}
# #+LATEX_HEADER: \renewcommand\maketitle{}
# #+LATEX_HEADER: \pagestyle{empty}
# #+LaTeX: \thispagestyle{empty}

* FullCalendar viewer for mhc

  In [[file:full-calendar][full-calendar]] directory:

  1) Prepare JSON data with =mhc scan=
     [[file:full-calendar/update-json.sh][update-json.sh]]:
     #+BEGIN_SRC shell-script
       #!/bin/sh

       mhc scan thismonth+6m  --search='category:holiday'   \
                              --format=json > holidays.json
       mhc scan thismonth+6m  --search='!category:holiday'  \
                              --format=json > events.json
     #+END_SRC

  2) open =full-calendar.html= with a browser

* Forecasting next occurrence of a recurring event
  Heron is an event forecaster https://github.com/nomlab/heron

  #+BEGIN_SRC shell-script
    mhc scan all --search='subject:"Group meeting"' | awk '{print $1}' | heron forecast
    2015-08-17

    mhc scan all --search='recurrence_tag:"HairCut"' | awk '{print $1}' | heron forecast
    2015-10-10
  #+END_SRC

* Show last-year's schedule at the left buffer.
  Sometimes, you may want to check the last year's schedule on browsing
  future schedule. This code would help you.

  Split window horizontally and show two mhc-summary-buffers, then
  the left buffer follows the right one.

  #+BEGIN_SRC emacs-lisp
    (defun mhc-summary-get-left-summary-window ()
      "Return the left mhc-summary buffer of current buffer."
      (save-window-excursion
        (let* ((left-win (window-in-direction 'left))
               (left-buf (window-buffer left-win)))
          (if (and left-win
                   (eq (with-current-buffer left-buf major-mode)
                       'mhc-summary-mode))
              left-win
            nil))))

    (defun mhc-summary-set-left-window ()
      (let ((left-win (mhc-summary-get-left-summary-window))
            (current-date (mhc-summary-current-date-month)))
        (if (and left-win current-date)
            (with-selected-window left-win
              (mhc-goto-month (mhc-date-yy- current-date 1))))))

    (add-hook 'mhc-summary-mode-hook 'mhc-summary-set-left-window)
  #+END_SRC

  How to use it:
  1) Show the mhc-summary-buffer of current month by =M-x mhc=.
  2) Split horizontally by =C-x 3=.
     Yes, you may see the current month in both buffers.
  3) Set focus at the right-side one.
  4) Now, moving the month in the right buffer,
     left buffer follows showing the previous year of the right buffer.

* mhc-sync-all: sync all channels
  This script hits these commands more interactively:
  #+BEGIN_SRC sh
    $ cd  YOUR-MHC-REPOSITORY
    $ git add .
    $ git commit -m Update
    $ mhc sync personal
    $ mhc sync business
    $ mhc sync family
  #+END_SRC

  Channel names personal, business, family are embedded in the shell script.
  You may want to customize them.

  Before hit the script, you have to do `git init` in YOUR-MHC-REPOSITORY.

  #+BEGIN_SRC sh
    #!/bin/sh

    print_message () {
        printf "$@"
    } >&2

    commit_all() {
      (
        cd "$1"
        git add .
        git commit -m "Update"
      )
    }

    confirm() {
      print_message "$1 (yes|no) "
      read yesno

      if [ "$yesno" = "yes" ]; then
        return 0
      else
        return 1
      fi
    }

    eval REPOSITORY=$(mhc config general.repository | sed "s!~/!$HOME/!")
    print_message "Checking $REPOSITORY...\n"

    if [ ! -d "$REPOSITORY" ]; then
      print_message "Error: repository $REPOSITORY not found.\n"
      exit 1
    fi

    GIT_STATUS=$(cd "$REPOSITORY"; git status -s 2>&1)

    if [ -n "$GIT_STATUS" ]; then
      print_message "Git repository is not clean!!\n$GIT_STATUS\n"

      if ! confirm "Commit everything and proceed?"; then
        print_message "Aborting...\n"
        exit 1
      fi
      commit_all "$REPOSITORY"

    else
      print_message "Git repository is clean\n"

      if ! confirm "Proceed?"; then
        print_message "Aborting...\n"
        exit 1
      fi
    fi

    for channel in personal business family
    do
      print_message "* Start syncing channel: $channel\n"
      mhc sync $channel
    done
  #+END_SRC
